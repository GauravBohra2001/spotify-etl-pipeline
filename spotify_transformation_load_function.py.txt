import json
import boto3
from datetime import datetime
from io import StringIO
import pandas as pd 

def album(data):
    
    #This part is getting all the artist for a particular song
    len_artist = []
    artist_name = []
    all_artist = []
    artist = []
    for i in data['items']:
        len_artist.append(len(i['track']['artists']))
        artist_name.append(i['track']['artists'])
    
    for i in range(0, len(len_artist)):
        if len_artist[i] == 1:
            all_artist.append(artist_name[i][0]['name'])
        else:
            for j in range(0,len_artist[i]):
                all_artist.append(artist_name[i][j]['name'])
    
    start_index = 0
    for length in len_artist:
        end_index = start_index + length
        elements = all_artist[start_index:end_index]
        start_index = end_index
        artist.append((tuple(elements))) 
    
    
    #This code is used to extract all the information from the page
    album_list = []
    for i, row in enumerate(data['items']):
        id = row['track']['album']['id']
        album_name = row['track']['album']['name']
        release_date = row['track']['album']['release_date']
        total_tracks = row['track']['album']['total_tracks']
        external_url = row['track']['album']['external_urls']['spotify']
        song_name = row['track']['name']
        artist_name = artist[i] if i < len(artist) else None
    
        # Creating a dictionary
        album_element = {'id': id, 'album_name': album_name, 'release_date': release_date, 'total_tracks': total_tracks,
                         'external_url': external_url, 'song_name': song_name, 'artist_name': artist_name}
        album_list.append(album_element)
        
    return album_list    
        
        
        
        
def lambda_handler(event, context):
    s3 = boto3.client('s3')
    Bucket = "spotify-etl-projet-gaurav"
    Key = "raw_data/to_processed/"
    
    spotify_data = []
    spotify_keys = []
    for file in s3.list_objects(Bucket=Bucket, Prefix=Key)['Contents']:
        file_key = file['Key']
        if file_key.split('.')[-1] == 'json':
            response = s3.get_object(Bucket = Bucket, Key = file_key)
            content = response['Body']
            jsonObject = json.loads(content.read())
            spotify_data.append(jsonObject)
            spotify_keys.append(file_key)
            
    for data in spotify_data:
        album_list = album(data)
        print(album_list)
    
    #Creating Data Frame
    album_df = pd.DataFrame.from_dict(album_list)
    album_df.head()
    
    album_key = "transformed_data/album_data/album_transformed_" + str(datetime.now()) + ".csv"
    album_buffer=StringIO()
    album_df.to_csv(album_buffer, index=False)
    album_content = album_buffer.getvalue()
    s3.put_object(Bucket=Bucket, Key=album_key, Body=album_content)

    
    #Moving data from to_processed to processed and then deleting from to_processed
    
    s3_resource = boto3.resource('s3')
    for key in spotify_keys:
        copy_source = {
            'Bucket': Bucket,
            'Key': key
        }
        s3_resource.meta.client.copy(copy_source, Bucket, 'raw_data/processed/' + key.split("/")[-1])    
        s3_resource.Object(Bucket, key).delete()
    
    
    
    
    
    